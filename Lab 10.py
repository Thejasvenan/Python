maze=[
#      0   1   2   3   4   5   6   7   8   9  10  11  12  13
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],  
    [1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1],  #0                                                           
    [1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1],  
    [1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1],  #1
    [1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1],  
    [0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1],  #2
    [1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1],  
    [1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,1,0,1],  #3
    [1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1],  
    [1,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1],  #4
    [1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,1,0,1],  
    [1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,0,0,1,0,1],  #5
    [1,0,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1],  
    [1,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],  #6
    [1,1,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,0,1],  
    [1,0,1,0,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,1],  #7
    [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,1,1,0,1,0,1],  
    [1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],  #8
    [1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1,0,1,0,1,1,1,0,1],  
    [1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,1,0,1],  #9
    [1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1],  
    [1,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,1,0,1],  #10
    [1,1,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,0,1,0,1],  
    [1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0],  #11
    [1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1],  
    [1,0,1,0,0,0,1,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,1],  #12
    [1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1],  
    [1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1],  #13
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
    ]
i, j = 5, 1   #indicating starting points(2,0) in index of our new matrix where (i = 2*y +1),(j = 2*x +1)

moves = [] 
x_inc = []
y_inc = []
print("Start at ( 2 , 0 )")
while not(i == 23 and j == 27): #looping until ending points(11,13) in index of our new matrix where (i = 2*y +1),(j = 2*x +1)
    for direction in ["North", "East", "South", "West"]:
        x = 0 
        y = 0
        if direction == "North":
            y -= 1

        elif direction == "East":
            x += 1

        elif direction == "South":
            y += 1

        elif direction == "West":
            x -= 1

        if i+y > 0 and j+x >0:
            if (maze[i+y][j+x] == 0):
                #if no wall move and new coordinates marked
                moves.append(direction)
                x_inc.append(x)
                y_inc.append(y)
                i += y
                j += x 
                maze[i][j] = 1   #turning the path came into
                break
    else:
        #printing the moves if stuck and back to the last position
        for move in range(0,len(moves),2):
            print(moves[move], end=" ")
        else:
            moves = []
        print(f"Stuck at ( {(i-1)//2} , {(j-1)//2} )") #finding the original coordinates from our matrix coordinates

        x_last = x_inc.pop() + x_inc.pop()
        y_last = y_inc.pop() + y_inc.pop()
        i -= y_last
        j -= x_last
        print(f"Back to ( {(i-1)//2} , {(j-1)//2} )") #finding the original coordinates from our matrix coordinates
else:
    #printing the last moves if found the way
    for move in range(0,len(moves),2):
        print(moves[move], end=" ")
    else:
        print("Leaving at ( 11 , 13 )")